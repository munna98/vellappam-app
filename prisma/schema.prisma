// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// --- CompanyInfo Model ---
// Represents the company's information.
model CompanyInfo {
  id                 String    @id @default(uuid())
  businessName       String    @unique
  address1           String?
  address2           String?
  city               String?
  state              String?
  zipCode            String?
  country            String?
  phone              String?
  mobile             String?
  email              String?
  website            String?
  logoUrl            String?
  gstin              String?
  bankName           String?
  bankAccountNo      String?
  ifscCode           String?
  upiId              String?
  // New field
  defaultPrintOnSave Boolean   @default(true) // Default to true for existing installations
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}
// --- Customer Model ---
// Represents a B2B customer (e.g., a restaurant or shop).
model Customer {
  id            String    @id @default(cuid())
  name          String
  code          String    @unique
  contactPerson String?
  phone         String?   @unique
  address       String?
  balance       Float     @default(0.0) // Tracks outstanding balance
  invoices      Invoice[]
  payments      Payment[] // Payments made by this customer (direct relation to Payment model)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// --- Product Model ---
// Represents a product being sold (e.g., Vallappam, Pathiri, Porotta).
model Product {
  id          String        @id @default(cuid())
  name        String        @unique
  code        String        @unique
  price       Float         // Price per unit (e.g., per piece, per dozen)
  unit        String        @default("piece") // e.g., "piece", "dozen"
  invoiceItems InvoiceItem[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// --- Invoice Model ---
// Represents a single invoice for a customer.
model Invoice {
  id            String        @id @default(uuid())
  invoiceNumber String        @unique // e.g., INV1
  invoiceNumericId  Int       @unique @default(autoincrement())
  customerId    String
  invoiceDate   DateTime      @default(now())
  totalAmount   Float         // Subtotal of all items (before discount)
  discountAmount Float        @default(0.0) // Discount applied to the invoice
  netAmount     Float         // totalAmount - discountAmount
  paidAmount    Float         @default(0.0) // Amount actually paid for this specific invoice
  balanceDue    Float         // netAmount - paidAmount (outstanding for THIS invoice)
  status        InvoiceStatus @default(PENDING) // Status of the invoice
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  customer Customer    @relation(fields: [customerId], references: [id])
  items    InvoiceItem[]
  paymentAllocations PaymentAllocation[]
  @@index([invoiceNumber(sort: Desc)])
  @@index([invoiceNumericId(sort: Desc)])
}
// --- Invoice Item Model ---
// Represents a line item on an invoice.
model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id])
  productId   String
  product     Product @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  total       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt // FIX APPLIED HERE: Added @default(now())
}
 
// --- Payment Model ---
// Represents a payment received from a customer.
model Payment {
  id              String  @id @default(cuid())
  paymentNumber   String  @unique 
  paymentNumericId   Int     @unique @default(autoincrement())
  customerId      String
  customer        Customer @relation(fields: [customerId], references: [id])
  amount          Float                         // Total amount of this payment
  paymentDate     DateTime @default(now())
  notes           String?

  // UPDATED: Now links to the PaymentAllocation junction table
  paymentAllocations PaymentAllocation[]
  @@index([paymentNumber(sort: Desc)])
  @@index([paymentNumericId(sort: Desc)])

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// --- NEW JUNCTION TABLE: PaymentAllocation ---
// This model represents a specific portion of a payment applied to a specific invoice.
// It acts as the "through" table for the many-to-many relationship between Payment and Invoice.
model PaymentAllocation {
  id          String   @id @default(cuid())
  paymentId   String
  payment     Payment  @relation(fields: [paymentId], references: [id])
  invoiceId   String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  allocatedAmount Float    // The portion of the payment amount applied to this specific invoice
  allocatedAt DateTime @default(now())

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// --- Invoice Status Enum ---
enum InvoiceStatus {
  PENDING   // Not fully paid (balanceDue > 0)
  PAID      // Fully paid (balanceDue <= 0)
}