// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- CompanyInfo Model ---
// Represents the company's information.
model CompanyInfo {
  id          String   @id @default(cuid())
  businessName String
  address1     String?
  mobile       String?
}

// --- Customer Model ---
// Represents a B2B customer (e.g., a restaurant or shop).
model Customer {
  id        String    @id @default(cuid())
  name      String
  code      String @unique
  contactPerson String?
  phone     String?   @unique
  address   String?
  balance   Float     @default(0.0) // Tracks outstanding balance
  invoices  Invoice[]
  payments  Payment[]
    createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

// --- Product Model ---
// Represents a product being sold (e.g., Vallappam, Pathiri, Porotta).
model Product {
  id           String       @id @default(cuid())
  name         String       @unique
  code      String  @unique
  price        Float        // Price per unit (e.g., per piece, per dozen)
  unit         String       @default("piece") // e.g., "piece", "dozen"
  invoiceItems InvoiceItem[]
    createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

// --- Invoice Model ---
// Represents a single invoice for a customer.
model Invoice {
  id           String        @id @default(cuid())
  invoiceNumber String        @unique @default(cuid()) // A human-readable invoice number
  customerId   String
  customer     Customer      @relation(fields: [customerId], references: [id])
  invoiceDate  DateTime      @default(now())
  totalAmount  Float
  status       InvoiceStatus @default(PENDING)
  notes        String?
  items        InvoiceItem[]
  payments     Payment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

// --- Invoice Item Model ---
// Represents a line item on an invoice.
model InvoiceItem {
  id        String   @id @default(cuid())
  invoiceId String
  invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  unitPrice Float
  total     Float 
}

// --- Payment Model ---
// Represents a payment received from a customer.
model Payment {
  id          String   @id @default(cuid())
  paymentNumber String  @unique @default(cuid())
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id])
  invoiceId   String?  // Optional: A payment can be linked to a specific invoice
  invoice     Invoice? @relation(fields: [invoiceId], references: [id])
  amount      Float
  paymentDate DateTime @default(now())
  notes       String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

// --- Invoice Status Enum ---
// Defines the possible statuses for an invoice.
enum InvoiceStatus {
  PENDING
  PAID
  PARTIAL
}